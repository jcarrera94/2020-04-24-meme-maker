{"version":3,"sources":["components/meme.js","components/memeList.js","components/editor.js","App.js","serviceWorker.js","index.js"],"names":["Meme","template","onClick","chosen","useState","style","margin","padding","height","width","transform","key","id","src","url","alt","name","MemeList","memes","setTemplate","memeListStyles","map","display","flexDirection","overflowY","alignSelf","marginBottom","justifyContent","Editor","topText","setTopText","bottomText","setBottomText","editorStyles","contentEditable","y","x","placeholder","value","onChange","e","target","border","borderRadius","position","right","bottom","App","templates","setTemplates","useEffect","fetch","then","json","response","data","className","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wQAmBeA,G,MAjBF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EAEtBC,mBAAS,IAFa,6BAI9C,OACE,yBAAKC,MAAO,CAACC,OAAQ,EAAGC,QAAS,IAC/B,yBACEF,MAAQF,EAASF,EAASO,OAAOP,EAASQ,MAAQ,EAAI,CAAEA,MAAO,IAAKC,UAAW,mBAAsB,CAAED,MAAO,KAAQ,CAAEA,MAAO,IAAKC,UAAW,mBAC/IC,IAAKV,EAASW,GACdC,IAAKZ,EAASa,IACdC,IAAKd,EAASe,KACdd,QAASA,OCOFe,EAjBE,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACzB,OACE,yBAAKd,MAAOe,GACTF,EAAMG,KAAI,SAAApB,GACT,OACE,kBAAC,EAAD,CACEA,SAAUA,EACVC,QAAS,WACPiB,EAAYlB,WAWbmB,EAAiB,CAC5BE,QAAS,OACTb,MAAO,MACPc,cAAe,SACfC,UAAW,OACXC,UAAW,WACXC,aAAc,MACdC,eAAgB,cCIHC,EA9BA,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAAe,EAEDG,mBAAS,IAFR,mBAExByB,EAFwB,KAEfC,EAFe,OAGK1B,mBAAS,IAHd,mBAGxB2B,EAHwB,KAGZC,EAHY,KAK/B,OACE,yBAAK3B,MAAO4B,GACThC,GACC,oCACA,yBAAKiC,iBAAiB,GACpB,kBAAC,EAAD,CAAMjC,SAAUA,EAAUE,QAAQ,IAClC,0BAAMgC,EAAE,OAAON,GACf,0BAAMO,EAAE,OAAOL,IAEf,2BACEM,YAAY,WACZC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,OAAOH,UAErC,2BACED,YAAY,cACZC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAcQ,EAAEC,OAAOH,aAUrCL,EAAe,CAC1BS,OAAQ,oBACRC,aAAc,OACdlC,MAAO,MACPD,OAAQ,OACRoC,SAAU,WACVC,MAAO,KACPC,OAAQ,KACRxB,QAAS,OACTf,QAAS,OClBIwC,MArBf,WAAgB,IAAD,EAEqB3C,mBAAS,IAF9B,mBAEN4C,EAFM,KAEKC,EAFL,OAGmB7C,mBAAS,MAH5B,mBAGNH,EAHM,KAGIkB,EAHJ,KAWb,OANA+B,qBAAU,WACRC,MAAM,qCAAqCC,MAAK,SAAAhB,GAAC,OAC/CA,EAAEiB,OAAOD,MAAK,SAAAE,GAAQ,OAAIL,EAAaK,EAASC,KAAKrC,eAEtD,IAGD,yBAAKsC,UAAU,OACb,8CACA,wBAAInD,MAAO,CAACoB,UAAW,WAAYgC,WAAY,UAA/C,mBACA,kBAAC,EAAD,CAAUvC,MAAO8B,EAAW7B,YAAaA,IACzC,kBAAC,EAAD,CAAQlB,SAAUA,MCTJyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5381f88.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Meme = ({ template, onClick, chosen }) => {\n\n  const [test, setTest] = useState('')\n\n  return (\n    <div style={{margin: 0, padding: 0}}>\n      <img\n        style={ chosen ? template.height/template.width > 1 ? { width: 350, transform: 'scale(0.6, 0.6)' } : { width: 350 } : { width: 200, transform: 'scale(0.8, 0.8)' }}\n        key={template.id}\n        src={template.url}\n        alt={template.name}\n        onClick={onClick}\n      />\n    </div>\n  )\n}\n\nexport default Meme\n\n","import React from 'react';\nimport Meme from './meme'\n\nconst MemeList = ({ memes, setTemplate }) => {\n  return (\n    <div style={memeListStyles}>\n      {memes.map(template => {\n        return (\n          <Meme\n            template={template}\n            onClick={() => {\n              setTemplate(template);\n            }}\n          />\n        );\n      })}\n    </div>\n  )\n}\n\nexport default MemeList\n\nexport const memeListStyles = {\n  display: 'flex',\n  width: '20%',\n  flexDirection: 'column',\n  overflowY: 'auto',\n  alignSelf: 'baseline',\n  marginBottom: '2em',\n  justifyContent: 'flex-start'\n}","import React, { useState } from 'react';\nimport Meme from './meme';\n\nconst Editor = ({ template }) => {\n\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n\n  return (\n    <div style={editorStyles}>\n      {template && (\n        <>\n        <div contentEditable={true}>\n          <Meme template={template} chosen={true} />\n          <text y='2em'>{topText}</text>\n          <text x='4em'>{bottomText}</text>\n        </div>\n          <input\n            placeholder='Top Text'\n            value={topText}\n            onChange={e => setTopText(e.target.value)}\n          />\n          <input\n            placeholder='Bottom Text'\n            value={bottomText}\n            onChange={e => setBottomText(e.target.value)}\n          />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Editor\n\nexport const editorStyles = {\n  border: 'solid 2px #485460',\n  borderRadius: '12px',\n  width: '67%',\n  height: '82vh',\n  position: 'absolute',\n  right: '7%',\n  bottom: '4%',\n  display: 'flex',\n  padding: '1em'\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport MemeList from './components/memeList';\nimport Editor from './components/editor';\n\nfunction App() {\n\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x =>\n      x.json().then(response => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Meme generator</h1>\n      <h2 style={{alignSelf: 'baseline', marginLeft: '2.5em'}}>Pick a template</h2>\n      <MemeList memes={templates} setTemplate={setTemplate}/>\n      <Editor template={template}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}